{
  "id": "",
  "guid": "",
  "name": "Instance - Open Port",
  "type": "CHANGE_COMPLETION",
  "change_description": null,
  "fulfillment_rule": "NONE",
  "add_owner_as_admin": false,
  "auto_deploy": false,
  "users": [],
  "organizations": [],
  "target_type": null,
  "info_messages": [],
  "prompt_message": null,
  "system_version": "8.10.4 (1007150089)",
  "steps": [
    {
      "name": "Azure - Add port rule to Instance NGG",
      "type": "EMBEDDED_SCRIPT",
      "condition": "#{target.cloudAccount.type} -eq \"ms_arm\"",
      "data": {
        "credentials": null,
        "failure_action": "FAIL_STEP",
        "script_contents": " <#\nAzure Instance CR - Open TCP/UDP Ports.\nRequires PS module AZ on the Commander server.\n*Commander 8.6.0 or higher\n*Advanced property \"embotics.workflow.script.credentials\" must be set to \"true\"\nRequires three form Attributes:\nList Attribute on Change Request Form: TCP/UDP\nRegex for CIDR on Change Request Form: ^([0-9]{1,3}\\.){3}[0-9]{1,3}($|\\/(0|16|24|32))$\nRegex for Port Value on Change Request Form: ^\\d+$\n#> \n\n$subscriptionId = (Get-Item Env:AZURE_SUBSCRIPTION_ID).value\n$tenantId = (Get-Item Env:AZURE_TENANT_ID).value\n$apiKey = (Get-Item Env:AZURE_API_KEY).value\n$ApplicationId = (Get-Item Env:AZURE_APPLICATION_ID).value\n$InstanceId =\"#{target.remoteId}\"\n$Module = \"AZ\"\n$RG = \"#{target.resourceGroup.name}\"\n$ipCidr = \"#{target.settings.customAttribute['CIDR Input']}\"\n$Protocol = \"#{target.settings.customAttribute['Protocol']}\"\n$Port = \"#{target.settings.customAttribute['Port']}\" \n\nif(!($subscriptionId) -or !($tenantId) -or !($apiKey) -or !($ApplicationId)-or !($Module) -or !($InstanceId)-or !($RG)){\n        Write-error \"Please provide Azure Login information\"\n        #Exit 1\n        }\n\n#Remove white space for older versions of powershell\n    $subscriptionId = $subscriptionId -replace \"\\s\", \"\"\n    $tenantId = $tenantId -replace \"\\s\", \"\"\n    $apiKey = $apiKey -replace \"\\s\", \"\"\n    $ApplicationId = $ApplicationId -replace \"\\s\", \"\" \n\n #Check for Module\n    if (Get-Module -ListAvailable -Name \"$Module.*\") {\n        Import-Module $Module\n        Write-Debug \"Module $Module is installed.\"\n        } \n        else {\n            Write-Error \"Module $module does not appear to be installed, Please install and run again.\"\n            Exit 1\n        }\n\n#Credential Object\n    [pscredential]$Credential= New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList \"$ApplicationId\",(\"$apiKey\" | ConvertTo-SecureString -AsPlainText -Force) \n\n#Connect to Azure\n    $Connect = Connect-AzAccount -Credential $Credential -Subscription $subscriptionId -Tenant $tenantId -ServicePrincipal -Confirm:$false\n    if($Connect){\n        Write-Debug \"Connected to $($Connect[0].Context.Environment.name)\"\n    }\n\n#Get-VMdata\n    Try{\n        $VmName = $InstanceId.Split('/') | select -Last 1\n        $Vmdata = Get-AzVM -Name $vmname -ResourceGroupName $RG\n        $location = $vmdata.Location\n        }\n        Catch{\n            $Exception = \"$_.\"\n            Write-Error $Exception\n            Exit 1     \n            }\n    $vmnics = $vmdata.NetworkProfile.NetworkInterfaces.id\n    if($vmnics.count -gt 1){\n            write-error \"Instance has more than one vNic, Exiting instead of modifying the incorrect Nic. \" -ForegroundColor Red\n            Exit 1    \n            }\n        else{\n            $vNicName = $vmnics.Split('/') | select -Last 1\n            $vNic = Get-AzNetworkInterface -ResourceGroupName $RG  -Name $vNicName\n            }\n     \n# Get NSG if it exists and modify it, Else Create a New NSG with the requested rules. \n    if($vNic.NetworkSecurityGroup -eq $null){\n        $NsgName = $VmName+\"-nsg\"\n        $RuleName = $VmName+\"-rule\"\n        Try{    \n            $nsgrule = New-AzNetworkSecurityRuleConfig -Name $RuleName -Access Allow -Protocol $Protocol -Direction Inbound -Priority 101 -SourceAddressPrefix $ipCidr -SourcePortRange * -DestinationAddressPrefix * -DestinationPortRange $Port\n            $nsgresult = New-AzNetworkSecurityGroup -Name $NsgName -ResourceGroupName $rg  -Location  $location -Confirm:$false -Force -SecurityRules $nsgrule\n            $vNic.NetworkSecurityGroup = $nsgresult\n            $vNic | Set-AzNetworkInterface \n            }\n            Catch{\n                 $Exception = \"$_.Exception\"\n                 Write-Error $Exception\n                 Exit 1     \n                }\n        Write-host \"NSG changes will take a few to be active\"        \n        }\n    elseif($vnic.NetworkSecurityGroup -ne $null){\n        Try{\n            $RuleName = (\"$Protocol-$port-rule\").ToLower()\n            $aznsg = ($vnic.NetworkSecurityGroup.Id).Split('/') | select -Last 1\n            $nsgconfig = Get-AzNetworkSecurityGroup -Name $aznsg -ResourceGroupName $rg -verbose\n            $nextPriority = ($nsgconfig.SecurityRules.priority| Select-object -Last 1) +1\n            $nsgrule = Add-AzNetworkSecurityRuleConfig -NetworkSecurityGroup $nsgconfig -Name $RuleName -Description $RuleName -Access Allow -Protocol $Protocol -Direction Inbound -Priority $nextPriority -SourceAddressPrefix $ipCidr -SourcePortRange * -DestinationAddressPrefix * -DestinationPortRange @($Port) | Set-AzNetworkSecurityGroup -Verbose\n            $nsgrule \n            }\n            Catch{\n                 $Exception = \"$_.Exception\"\n                 Write-Error $Exception\n                 Exit 1     \n                }\n        Write-host \"NSG changes will take a few to be active\"          \n        }\n    else{\n    } \n\n",
        "script_arguments": "",
        "timeout": 300,
        "executable": "powershell.exe",
        "capture_output": true
      }
    }
  ]
}