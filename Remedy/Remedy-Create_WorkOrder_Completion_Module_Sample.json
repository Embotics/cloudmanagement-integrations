{
  "id": "",
  "guid": "",
  "name": "Create Remedy Work Order",
  "description": "Sample Module to create a work order in Remedy as part of a VM Completion Workflow.",
  "type": "COMPONENT_COMPLETION",
  "change_description": null,
  "target_type": null,
  "input_variables": [
    {
      "name": "Remedy Address",
      "variable": "remedy_address",
      "description": "Remedy DNS address  IE: helixtrialsjcXXX-dev-restapi.onbmc.com",
      "required": true,
      "default_value": "helixtrialsjcXXX-dev-restapi.onbmc.com"
    },
    {
      "name": "Bypass Unsigned Certificate",
      "variable": "bypass_Cert",
      "description": "Bypass unsigned Certificate: {yes/no}",
      "required": true,
      "default_value": "No"
    },
    {
      "name": "Work Order Status",
      "variable": "workOrderStatus",
      "description": "Desired Status of the Created Work Order",
      "required": true,
      "default_value": "Completed"
    }
  ],
  "info_messages": [],
  "system_version": "8.10.4 (1007150089)",
  "steps": [
    {
      "name": "Execute Embedded Script",
      "type": "EMBEDDED_SCRIPT",
      "condition": null,
      "data": {
        "credentials": null,
        "failure_action": "FAIL_STEP",
        "script_contents": "<#\nSample Module to Create a Workorder in Remedy as part of a VM Completion Workflow.\n\nRequirements: \n* Commander 8.6.0 or higher\n* Advanced property \"embotics.workflow.script.credentials\" must be set to \"true\"\n#>\n\n$RemedyAddress = \"#{inputVariable['remedy_address']}\"\n$Username = (Get-Item Env:SELECTED_CREDENTIALS_USERNAME ).value; #Credential\n$Password = (Get-Item Env:SELECTED_CREDENTIALS_PASSWORD).value;\n$BypassCert = \"#{inputVariable['bypass_Cert']}\"    #to bypass an unsigned SSL cert on the Target\n\n#Workorder Variables\n$Description = \"Created by Snow Commander\"\n$Firstname = \"XXXX\"\n$Lastname = \"XXXX\"\n$CustomerFirstName = \"XXXX\"\n$CustomerLastName = \"XXXX\"\n$Summary = \"Commander RequestID - #{request.id}\"\n$Status = \"#{inputVariable['workOrderStatus']}\" \n$Company = \"#{request.requester.organization.name}\"\n$CustomerCompany = \"#{request.requester.organization.name}\"\n$Location = \"#{request.requester.organization.name}\"\n\n#$DebugPreference=\"Continue\"\n$ErrorActionPreference = \"Stop\"\n\nif (!($RemedyAddress) -or !($WorkorderID) -or !($UserName) -or !($Password)) {\n    Write-error \"Please provide Remedy Login Information\"\n    Exit 1\n}\nif (!($Description) -or !($Firstname) -or !($Lastname) -or !($CustomerFirstName) -or !($CustomerLastName) -or !($Summary) -or !($Status) -or !($Company) -or !($CustomerCompany) -or !($Location)) {\n    Write-error \"Please provide Remedy Login Information\"\n    Exit 1\n}\n\n#Bypass unsigned SSL cert for phpipam\nif ($BypassCert -eq \"Yes\") {\n    Write-host \"- Ignoring invalid Certificate\" -ForegroundColor Green\n\n    # Create a compilation environment\n    $Provider = New-Object Microsoft.CSharp.CSharpCodeProvider\n    $Provider.CreateCompiler()\n    $Params = New-Object System.CodeDom.Compiler.CompilerParameters\n    $Params.GenerateExecutable = $False\n    $Params.GenerateInMemory = $True\n    $Params.IncludeDebugInformation = $False\n    $Params.ReferencedAssemblies.Add(\"System.DLL\") > $null\n    $TASource = @'\n   namespace Local.ToolkitExtensions.Net.CertificatePolicy {\n     public class TrustAll : System.Net.ICertificatePolicy {\n       public TrustAll() { \n       }\n       public bool CheckValidationResult(System.Net.ServicePoint sp,\n         System.Security.Cryptography.X509Certificates.X509Certificate cert, \n         System.Net.WebRequest req, int problem) {\n         return true;\n       }\n     }\n   }\n'@ \n    $TAResults = $Provider.CompileAssemblyFromSource($Params, $TASource)\n    $TAAssembly = $TAResults.CompiledAssembly\n    $TrustAll = $TAAssembly.CreateInstance(\"Local.ToolkitExtensions.Net.CertificatePolicy.TrustAll\")\n    [System.Net.ServicePointManager]::CertificatePolicy = $TrustAll\n}\n\n#Get Remedy Token\n    $TokenUri = \"https://$RemedyAddress/api/jwt/login\"\n    $TokenContentType = 'application/x-www-form-urlencoded'\n    $TokenBody = @{\n        username = $($Username)\n        password = $($Password)\n    }\n    $Token = Invoke-RestMethod -uri $TokenUri -Method POST -ContentType $TokenContentType -body $TokenBody\n    $AuthHeader = @{\n        Authorization = \"AR-JWT $($Token)\"\n    }\n\n#Create Workorder\n        $WoclUri = \"https://$($RemedyAddress)/api/arsys/v1/entry/WOI:WorkOrderInterface_Create/\"\n        $Wojsonbody = \"{\"\"values\"\": {\n                        \"\"Detailed Description\"\": \"\"$Description\"\",\n                        \"\"z1D_Action\"\": \"\"CREATE\"\",\n                        \"\"First Name\"\": \"\"$firstname\"\",\n                        \"\"Last Name\"\": \"\"$lastname\"\",\n                        \"\"Customer First Name\"\": \"\"$CustomerFirstName\"\",\n                        \"\"Customer Last Name\"\": \"\"$CustomerLastName\"\",\n                        \"\"Summary\"\": \"\"$Summary\"\",\n                        \"\"Status\"\": \"\"$Status\"\",\n                        \"\"Company\"\": \"\"$Company\"\",\n                        \"\"Customer Company\"\": \"\"$CustomerCompany\"\",\n                        \"\"Location Company\"\": \"\"$Location\"\"\n                        }\n        }\"\n        $Wojsonbody = ConvertFrom-Json $Wojsonbody| ConvertTo-Json \n        Invoke-RestMethod -uri $WoclUri -Method POST -ContentType 'application/json' -Headers $AuthHeader -Body $Wojsonbody\n",
        "script_arguments": "",
        "timeout": 300,
        "executable": "Powershell.exe",
        "capture_output": true
      }
    }
  ]
}