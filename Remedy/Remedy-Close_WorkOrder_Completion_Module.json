{
  "id": "",
  "guid": "",
  "name": "Change Remedy Work Order Status",
  "description": null,
  "type": "COMPONENT_COMPLETION",
  "change_description": null,
  "target_type": null,
  "input_variables": [
    {
      "name": "Work Order ID",
      "variable": "RemedyWOiD",
      "description": "Remedy Work OrderID to Close: WO000000000XXXX",
      "required": true,
      "default_value": null
    },
    {
      "name": "Remedy Address",
      "variable": "remedy_address",
      "description": "Remedy DNS address  IE: helixtrialsjcXXX-dev-restapi.onbmc.com",
      "required": true,
      "default_value": "helixtrialsjcXXX-dev-restapi.onbmc.com"
    },
    {
      "name": "Work Order Status",
      "variable": "workOrderStatus",
      "description": "Desired Status of the specified Work Order",
      "required": true,
      "default_value": "Closed"
    },
    {
      "name": "Bypass Unsigned Certificate",
      "variable": "bypass_Cert",
      "description": "Bypass unsigned Certificate: {yes/no}",
      "required": true,
      "default_value": "No"
    }
  ],
  "info_messages": [],
  "system_version": "8.10.4 (1007150089)",
  "steps": [
    {
      "name": "Change Workorder Status",
      "type": "EMBEDDED_SCRIPT",
      "condition": null,
      "data": {
        "credentials": null,
        "failure_action": "FAIL_STEP",
        "script_contents": "<#\nModule to change the Workorder State in Remedy as part of a VM Completion Workflow.\n\nRequirements: \n* Commander 8.6.0 or higher\n* Advanced property \"embotics.workflow.script.credentials\" must be set to \"true\"\n\nNote: not all Remedy status transitions are acceptable: \n* https://docs.bmc.com/docs/srm81/about-work-order-status-transitions-225509555.html\n#>\n\n$RemedyAddress = \"#{inputVariable['remedy_address']}\"\n$Username = (Get-Item Env:SELECTED_CREDENTIALS_USERNAME ).value;   #Credential\n$Password = (Get-Item Env:SELECTED_CREDENTIALS_PASSWORD).value;\n$WorkorderID = \"#{inputVariable['RemedyWOiD']}\" \n$Status = \"#{inputVariable['workOrderStatus']}\"     # Status to set the work order to\n$BypassCert = \"#{inputVariable['bypass_Cert']}\"    #to bypass an unsigned SSL cert on the Target\n\n\n#$DebugPreference=\"Continue\"\n$ErrorActionPreference = \"Stop\"\n\nif (!($RemedyAddress) -or !($WorkorderID) -or !($UserName) -or !($Password)) {\n    Write-error \"Please provide Remedy information to close the workorder\"\n    Exit 1\n}\n\n#Bypass unsigned SSL cert for phpipam\nif ($BypassCert -eq \"Yes\") {\n    Write-host \"- Ignoring invalid Certificate\" -ForegroundColor Green\n\n    # Create a compilation environment\n    $Provider = New-Object Microsoft.CSharp.CSharpCodeProvider\n    $Compiler = $Provider.CreateCompiler()\n    $Params = New-Object System.CodeDom.Compiler.CompilerParameters\n    $Params.GenerateExecutable = $False\n    $Params.GenerateInMemory = $True\n    $Params.IncludeDebugInformation = $False\n    $Params.ReferencedAssemblies.Add(\"System.DLL\") > $null\n    $TASource = @'\n   namespace Local.ToolkitExtensions.Net.CertificatePolicy {\n     public class TrustAll : System.Net.ICertificatePolicy {\n       public TrustAll() { \n       }\n       public bool CheckValidationResult(System.Net.ServicePoint sp,\n         System.Security.Cryptography.X509Certificates.X509Certificate cert, \n         System.Net.WebRequest req, int problem) {\n         return true;\n       }\n     }\n   }\n'@ \n    $TAResults = $Provider.CompileAssemblyFromSource($Params, $TASource)\n    $TAAssembly = $TAResults.CompiledAssembly\n    $TrustAll = $TAAssembly.CreateInstance(\"Local.ToolkitExtensions.Net.CertificatePolicy.TrustAll\")\n    [System.Net.ServicePointManager]::CertificatePolicy = $TrustAll\n}\n\n#Get Remedy Token\n    $TokenUri = \"https://$RemedyAddress/api/jwt/login\"\n    $TokenContentType = 'application/x-www-form-urlencoded'\n    $TokenBody = @{\n        username = $($Username)\n        password = $($Password)\n    }\n    $Token = Invoke-RestMethod -uri $TokenUri -Method POST -ContentType $TokenContentType -body $TokenBody\n\n#Get Remedy WorkOrders\n    $WoUri = \"https://$($RemedyAddress)/api/arsys/v1/entry/WOI:WorkOrderInterface\"\n    $AuthHeader = @{\n        Authorization = \"AR-JWT $($Token)\"\n    }\n    $WoResults = Invoke-RestMethod -uri $WoUri -Method GET -ContentType 'application/json' -Headers $AuthHeader\n\n    $WoData = $WoResults.entries.values| Select-object \"Request ID\",\"Work Order ID\", Status | where-object \"Work Order ID\" -eq $WorkorderID\n    $WoReqID = $WoData.\"Request ID\"\n\n\n#Close Workorder if it's not in a closed state\n    $woStatus = $WoData.status\n    if ($woStatus -eq \"$status\") {\n        Write-host \"WorkOrder number $WorkorderID is already closed\"\n        Exit 0  \n    }\n    Elseif ($woStatus -ne \"$Status\") {\n        Write-host \"WorkOrder $WorkorderID is $woStatus Attempting to close. \"\n        $WoclUri = \"https://$($RemedyAddress)/api/arsys/v1/entry/WOI:WorkOrderInterface/$WoReqID\"\n        $Wojsonbody  = \"{\"\"values\"\":\n                            { \"\"Status\"\" : \"\"$status\"\" }\n                        }\"\n        $Wojsonbody = ConvertFrom-Json $Wojsonbody| ConvertTo-Json \n        Invoke-RestMethod -uri $WoclUri -Method PUT -ContentType 'application/json' -Headers $AuthHeader -Body $Wojsonbody\n    #Check State\n        $WoResults = Invoke-RestMethod -uri $WoUri -Method GET -ContentType 'application/json' -Headers $AuthHeader\n        $WoData = $WoResults.entries.values | Select-object \"Request ID\", \"Work Order ID\", Status | where-object \"Work Order ID\" -eq $WorkorderID\n        $WoState = $WoData.Status\n        if($wostate -eq $status){\n            Write-host \"WorkOrder $WorkorderID has been Marked as $status\"\n        }\n        Exit 0\n    }\n    Else {\n        Write-Error \"Something went wrong looking up the status for WorkorderID $WorkorderID, Please contact your Remedy Administrator\"\n        Exit 1\n        \n    } \n\n \n",
        "script_arguments": "",
        "timeout": 300,
        "executable": "powershell.exe",
        "capture_output": true
      }
    }
  ]
}
